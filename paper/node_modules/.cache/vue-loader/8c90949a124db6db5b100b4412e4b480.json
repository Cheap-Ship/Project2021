{"remainingRequest":"C:\\Users\\pmirm\\Desktop\\Project2021\\paper\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\pmirm\\Desktop\\Project2021\\paper\\src\\views\\propostas\\CriarProposta.vue?vue&type=template&id=2d5d4e37&","dependencies":[{"path":"C:\\Users\\pmirm\\Desktop\\Project2021\\paper\\src\\views\\propostas\\CriarProposta.vue","mtime":1617025362185},{"path":"C:\\Users\\pmirm\\Desktop\\Project2021\\paper\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\pmirm\\Desktop\\Project2021\\paper\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\pmirm\\Desktop\\Project2021\\paper\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\pmirm\\Desktop\\Project2021\\paper\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}